name: deploy
on:
  pull_request:
    branches:
      - main
    types:
      - closed
concurrency:
  group: ${{ github.workflow }}
jobs:
  deploy:
    name: Deploy
    environment:
      name: Production
      url: https://ptat.example.com
    # TODO: remove github.repository check, you don't need it (it's just here to prevent the template repo itself trying to deploy)
    if: >
      github.repository != 'pentible/typescript-app-template' &&
      github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci

      # update db
      - name: Install neonctl
        run: npm i -g neonctl@2.9.0
      - name: Fetch database credentials
        env:
          NEON_PROJECT_ID: ${{ vars.NEON_PROJECT_ID }}
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        run: |
          echo "DATABASE_URL=$(
            neonctl connection-string \
              'main' \
              --project-id "$NEON_PROJECT_ID" \
              --database-name 'ptat'
          )" >> "$GITHUB_ENV"
      - name: Run Migrations
        run: npx prisma migrate deploy

      # decrypt env
      - name: Install sops
        uses: mdgreenwald/mozilla-sops-action@v1.5.0
      - name: Decrypt environment variables
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}
        run: |
          envs="$(
            sops --decrypt --output-type json .env.production.yaml \
            | jq --compact-output 'with_entries(.key |= sub("_unencrypted$"; ""))'
          )"
          echo "APP_ENVS=${envs}" >> "$GITHUB_ENV"

      # deploy
      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          vercel --version
      - name: Deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ github.event.repository.name }}
        run: |
          readarray -t env_lines < <(jq --raw-output 'to_entries[] | "\(.key)=\(.value)"' <<< "$APP_ENVS")
          declare -a args=()
          for env_line in "${env_lines[@]}"; do
            args+=(-b "$env_line" -e "$env_line")
          done

          vercel --token="$VERCEL_TOKEN" deploy --prod "${args[@]}"
